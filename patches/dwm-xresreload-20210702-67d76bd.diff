From ba0607e9b76586d7f4462491ed43240bfd236e66 Mon Sep 17 00:00:00 2001
From: Anton Johansson <97antjoh@gmail.com>
Date: Fri, 2 Jul 2021 01:40:47 +0200
Subject: [PATCH] added reloading to xresoures patch

---
 config.def.h |  62 +++++++++++++++++++++-----------
 drw.c        |   2 +-
 drw.h        |   2 +-
 drw.o        | Bin 0 -> 10584 bytes
 dwm.c        |  98 +++++++++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 142 insertions(+), 22 deletions(-)
 create mode 100644 drw.o

diff --git a/config.def.h b/config.def.h
index 1c0b587..9d4c464 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,21 +1,23 @@
 /* See LICENSE file for copyright and license details. */

 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
-static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
-static const char *colors[][3]      = {
-	/*               fg         bg         border   */
-	[SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-	[SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+static unsigned int borderpx  = 1;        /* border pixel of windows */
+static unsigned int snap      = 32;       /* snap pixel */
+static int showbar            = 1;        /* 0 means no bar */
+static int topbar             = 1;        /* 0 means bottom bar */
+static char font[]            = "monospace:size=10";
+static char dmenufont[]       = "monospace:size=10";
+static const char *fonts[]          = { font };
+static char normbgcolor[]           = "#222222";
+static char normbordercolor[]       = "#444444";
+static char normfgcolor[]           = "#bbbbbb";
+static char selfgcolor[]            = "#eeeeee";
+static char selbordercolor[]        = "#005577";
+static char selbgcolor[]            = "#005577";
+static char *colors[][3] = {
+       /*               fg           bg           border   */
+       [SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
+       [SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
 };

 /* tagging */
@@ -32,9 +34,9 @@ static const Rule rules[] = {
 };

 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
-static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static int nmaster     = 1;    /* number of clients in master area */
+static int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

 static const Layout layouts[] = {
 	/* symbol     arrange function */
@@ -56,9 +58,30 @@ static const Layout layouts[] = {

 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbordercolor, "-sf", selfgcolor, NULL };
 static const char *termcmd[]  = { "st", NULL };

+/*
+ * Xresources preferences to load at startup
+ */
+ResourcePref resources[] = {
+		{ "font",               STRING,  &font },
+		{ "dmenufont",          STRING,  &dmenufont },
+		{ "normbgcolor",        STRING,  &normbgcolor },
+		{ "normbordercolor",    STRING,  &normbordercolor },
+		{ "normfgcolor",        STRING,  &normfgcolor },
+		{ "selbgcolor",         STRING,  &selbgcolor },
+		{ "selbordercolor",     STRING,  &selbordercolor },
+		{ "selfgcolor",         STRING,  &selfgcolor },
+		{ "borderpx",          	INTEGER, &borderpx },
+		{ "snap",          		INTEGER, &snap },
+		{ "showbar",          	INTEGER, &showbar },
+		{ "topbar",          	INTEGER, &topbar },
+		{ "nmaster",          	INTEGER, &nmaster },
+		{ "resizehints",       	INTEGER, &resizehints },
+		{ "mfact",      	 	FLOAT,   &mfact },
+};
+
 static Key keys[] = {
 	/* modifier                     key        function        argument */
 	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
@@ -112,4 +135,3 @@ static Button buttons[] = {
 	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
 	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
 };
-
diff --git a/drw.c b/drw.c
index 4cdbcbe..8f1059e 100644
--- a/drw.c
+++ b/drw.c
@@ -208,7 +208,7 @@ drw_clr_create(Drw *drw, Clr *dest, const char *clrname)
 /* Wrapper to create color schemes. The caller has to call free(3) on the
  * returned color scheme when done using it. */
 Clr *
-drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount)
+drw_scm_create(Drw *drw, char *clrnames[], size_t clrcount)
 {
 	size_t i;
 	Clr *ret;
diff --git a/drw.h b/drw.h
index 4bcd5ad..42b04ce 100644
--- a/drw.h
+++ b/drw.h
@@ -39,7 +39,7 @@ void drw_font_getexts(Fnt *font, const char *text, unsigned int len, unsigned in

 /* Colorscheme abstraction */
 void drw_clr_create(Drw *drw, Clr *dest, const char *clrname);
-Clr *drw_scm_create(Drw *drw, const char *clrnames[], size_t clrcount);
+Clr *drw_scm_create(Drw *drw, char *clrnames[], size_t clrcount);

 /* Cursor abstraction */
 Cur *drw_cur_create(Drw *drw, int shape);
diff --git a/drw.o b/drw.o
new file mode 100644
index 0000000000000000000000000000000000000000..57700fd5a8de8afefcb924e12f501da0236c1fb7
GIT binary patch
literal 10584
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
Z;WYH3Glq+V_f;<9m6mg=skfW|zX3<uWfuSd

literal 0
HcmV?d00001

diff --git a/dwm.c b/dwm.c
index b0b3466..31b8289 100644
--- a/dwm.c
+++ b/dwm.c
@@ -36,6 +36,7 @@
 #include <X11/Xlib.h>
 #include <X11/Xproto.h>
 #include <X11/Xutil.h>
+#include <X11/Xresource.h>
 #ifdef XINERAMA
 #include <X11/extensions/Xinerama.h>
 #endif /* XINERAMA */
@@ -141,6 +142,19 @@ typedef struct {
 	int monitor;
 } Rule;

+/* Xresources preferences */
+enum resource_type {
+	STRING = 0,
+	INTEGER = 1,
+	FLOAT = 2
+};
+
+typedef struct {
+	char *name;
+	enum resource_type type;
+	void *dst;
+} ResourcePref;
+
 /* function declarations */
 static void applyrules(Client *c);
 static int applysizehints(Client *c, int *x, int *y, int *w, int *h, int interact);
@@ -234,6 +248,8 @@ static int xerror(Display *dpy, XErrorEvent *ee);
 static int xerrordummy(Display *dpy, XErrorEvent *ee);
 static int xerrorstart(Display *dpy, XErrorEvent *ee);
 static void zoom(const Arg *arg);
+static void load_xresources(void);
+static void resource_load(XrmDatabase db, char *name, enum resource_type rtype, void *dst);

 /* variables */
 static const char broken[] = "broken";
@@ -268,6 +284,7 @@ static Display *dpy;
 static Drw *drw;
 static Monitor *mons, *selmon;
 static Window root, wmcheckwin;
+static int xres_should_reload = 0;

 /* configuration, allows nested code to access above variables */
 #include "config.h"
@@ -1377,8 +1394,21 @@ run(void)
 	/* main event loop */
 	XSync(dpy, False);
 	while (running && !XNextEvent(dpy, &ev))
+	{
+		if (xres_should_reload)
+		{
+			xres_should_reload = 0;
+
+			int i;
+			for (i = 0; i < LENGTH(colors); ++i)
+				scheme[i] = drw_scm_create(drw, colors[i], 3);
+
+			focus(NULL);
+			arrange(NULL);
+		}
 		if (handler[ev.type])
 			handler[ev.type](&ev); /* call handler */
+	}
 }

 void
@@ -2127,6 +2157,71 @@ zoom(const Arg *arg)
 	pop(c);
 }

+void
+resource_load(XrmDatabase db, char *name, enum resource_type rtype, void *dst)
+{
+	char *sdst = NULL;
+	int *idst = NULL;
+	float *fdst = NULL;
+
+	sdst = dst;
+	idst = dst;
+	fdst = dst;
+
+	char fullname[256];
+	char *type;
+	XrmValue ret;
+
+	snprintf(fullname, sizeof(fullname), "%s.%s", "dwm", name);
+	fullname[sizeof(fullname) - 1] = '\0';
+
+	XrmGetResource(db, fullname, "*", &type, &ret);
+	if (!(ret.addr == NULL || strncmp("String", type, 64)))
+	{
+		switch (rtype) {
+		case STRING:
+			strcpy(sdst, ret.addr);
+			break;
+		case INTEGER:
+			*idst = strtoul(ret.addr, NULL, 10);
+			break;
+		case FLOAT:
+			*fdst = strtof(ret.addr, NULL);
+			break;
+		}
+	}
+}
+
+void
+load_xresources(void)
+{
+	Display *display;
+	char *resm;
+	XrmDatabase db;
+	ResourcePref *p;
+
+	display = XOpenDisplay(NULL);
+	resm = XResourceManagerString(display);
+	if (!resm)
+		return;
+
+	db = XrmGetStringDatabase(resm);
+	for (p = resources; p < resources + LENGTH(resources); p++)
+		resource_load(db, p->name, p->type, p->dst);
+	XCloseDisplay(display);
+}
+
+void
+reload_all_xresources(int signum)
+{
+	(void)signum;
+	signal(SIGUSR1, reload_all_xresources);
+
+	load_xresources();
+
+	xres_should_reload = 1;
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -2139,6 +2234,9 @@ main(int argc, char *argv[])
 	if (!(dpy = XOpenDisplay(NULL)))
 		die("dwm: cannot open display");
 	checkotherwm();
+	XrmInitialize();
+	load_xresources();
+	signal(SIGUSR1, reload_all_xresources);
 	setup();
 #ifdef __OpenBSD__
 	if (pledge("stdio rpath proc exec", NULL) == -1)
--
2.32.0
